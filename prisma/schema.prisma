generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Comment {
  id        String     @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime
  content   String
  authorId  String
  postId    String
  User      User     @relation(fields: [authorId], references: [id])
  Post      Post     @relation(fields: [postId], references: [id])
  Like      Like[]
}

model Like {
  id         String     @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime
  userId    String
  postId    String?
  commentId String?
  Comment   Comment? @relation(fields: [commentId], references: [id])
  Post      Post?    @relation(fields: [postId], references: [id])
  User      User     @relation(fields: [userId], references: [id])
}

model Post {
  id        String     @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime
  title     String
  content   String
  published Boolean   @default(true)
  image     String?
  authorId  String
  Comment   Comment[]
  Like      Like[]
  User      User      @relation(fields: [authorId], references: [id])
}

model Profile {
  id     String     @id @default(cuid())
  bio    String?
  userId String     @unique
  image  String?
  User   User    @relation(fields: [userId], references: [id])
}

model User {
  id        String      @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  email     String    @unique
  name      String
  username  String?    @unique
  password  String?
  Comment   Comment[]
  Like      Like[]
  Post      Post[]
  Profile   Profile?
  image     String?
  emailVerified DateTime?
  accounts      Account[]
  sessions      Session[]

}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}